>>> Nestopia UE offsets
source/win32/NstMain.cpp: return Nestopia::Application::Main(cmdShow).Run();
	(Look for one of the static variables that gets assigned the this pointer in the constructor)
source/win32/NstApplicationMain.hpp: Nestopia::Application::Main::emulator @ offset 0
	class Main
	{
		Managers::Emulator emulator;
		// ...
	};
source/win32/NstManagerEmulator.hpp: base class Nes::Emulator
	class Emulator : public Nes::Emulator // Actually Nes::Api::Emulator
	{
		// ...
	};
source/core/api/NstApiEmulator.hpp: Nes::Api::Emulator::machine @ offset 0
	class Emulator
	{
		Core::Machine& machine;
		// ...
	};
source/core/NstMachine.hpp: Nes::Core::Machine::cpu @ offset 8
	class Machine
	{
		uint state; // offset 0
		dword frame; // offset 4
		Cpu cpu; // offset 8
		// ...
	};
source/core/NstCpu.hpp: Nes::Core::Cpu::ram @ offset 0x68 (0x70 from Nes::Core::Machine)
	class Cpu
	{
		uint pc; // offset 0
		Cycles cycles; // offset 4 (sizeof = 24)
		uint a; // offset 28
		uint x; // offset 32
		uint y; // offset 36
		uint sp; // offset 40
		Flags flags; // offset 44 (sizeof = 20)
		Interrupt interrupt; // offset 64 (sizeof = 12)
		Hooks hooks; // offset 76 (sizeof = 8)
		uint opcode; // offset 84
		word jammed; // offset 88
		word model; // offset 90
		Linker linker; // offset 92 (sizeof = 4)
		qaword ticks; // offset 96
		Ram ram; // offset 104 (0x68)
		// ...
	};
source/core/NstCpu.hpp: Nes::Core::Ram::mem @ offset 0 (0x70 from Nes::Core::Machine)
	struct Ram
	{
		byte mem[RAM_SIZE]; // offset 0
		// ...
	};

>>> NestopiaRTA 1.53.11 offsets
Same as Nestopia UE, except:
source/core/NstCpu.hpp: Nes::Core::Cpu::ram @ offset 0x70 (0x78 from Nes::Core::Machine)
	class Cpu
	{
		uint sessionID; // offset 0
		bool isClean; // offset 4
		uint pc; // offset 8
		Cycles cycles; // offset 12 (sizeof = 24)
		uint a; // offset 36
		uint x; // offset 40
		uint y; // offset 44
		uint sp; // offset 48
		Flags flags; // offset 52 (sizeof = 20)
		Interrupt interrupt; // offset 72 (sizeof = 12)
		Hooks hooks; // offset 84 (sizeof = 8)
		uint opcode; // offset 92
		word jammed; // offset 96
		word model; // offset 98
		Linker linker; // offset 100 (sizeof = 4)
		qaword ticks; // offset 104
		Ram ram; // offset 112 (0x70)
		// ...
	};
source/core/NstCpu.hpp: Nes::Core::Ram::mem @ offset 0 (0x78 from Nes::Core::Machine)
	struct Ram
	{
		byte mem[RAM_SIZE]; // offset 0
		// ...
	};

>>> NestopiaRTA >= 1.53.12 offsets
Same as NestopiaRTA 1.53.11, except:
source/core/NstMachine.hpp: Nes::Core::Machine::cpu @ offset 24
	class Machine
	{
		uint state; // offset 0
		dword frame; // offset 4
		double time; // offset 8
		bool timerRunning; // offset 16
		Cpu cpu; // offset 24
		// ...
	};
source/core/NstCpu.hpp: Nes::Core::Cpu::ram @ offset 0x70 (0x88 from Nes::Core::Machine)
source/core/NstCpu.hpp: Nes::Core::Ram::mem @ offset 0 (0x88 from Nes::Core::Machine)

>>> MesenRTA 0.0.7 offets

Emulation logic is handled by MesenCore.dll
InteropDLL/ConsoleWrapper.cpp: shared_ptr<Console> _console @ 0x1842F99D0
	(should be able to spot easily by analyzing InitDll())
Core/Console.h: Console::_memoryManager @ offset 0xB8
	class Console: public std::enable_shared_from_this<Console>
	{
		// base class: sizeof = 16
		SimpleLock _runLock; // offset 16 (sizeof = 12)
		SimpleLock _stopLock; // offset 28
		SimpleLock _debuggerLock; // offset 40
		atomic<uint32_t> _pauseCounter; // offset 52 (sizeof = 4)
		shared_ptr<RewindManager> _rewindManager; // offset 56 (sizeof = 16)
		shared_ptr<HistoryViewer> _historyViewer; // offset 72
		shared_ptr<CPU> _cpu; // offset 88
		shared_ptr<PPU> _ppu; // offset 104
		shared_ptr<APU> _apu; // offset 120
		shared_ptr<Debugger> _debugger; // offset 136
		shared_ptr<BaseMapper> _mapper; // offset 152
		shared_ptr<ControlManager> _controlManager; // offset 168
		shared_ptr<MemoryManager> _memoryManager; // offset 184 (0xB8)
		// ...
	};
Core/MemoryManager.h: MemoryManager::_internalRAM @ offset 0x58
	class MemoryManager: public Snapshotable
	{
		// base class: sizeof = 56 (Core/Snapshotable.h)
		shared_ptr<Console> _console; // offset 56 (sizeof = 16)
		shared_ptr<BaseMapper> _mapper; // offset 72
		uint8_t* _internalRAM; // offset 88 (0x58)
		// ...
	};

>>> Mesen2RTA 0.0.4 offsets

Emulation logic is handled by MesenCore.dll
InteropDLL/EmuApiWrapper.cpp: unique_ptr<Emulator> _emu @ 0x1846CC688
	(should be able to spot easily by analyzing InitDll())
Core/Shared/Emulator.h: Emulator::_console @ offset 0x10
	class Emulator
	{
		unique_ptr<thread> _emuThread; // offset 0 (sizeof = 8)
		unique_ptr<AudioPlayerHud> _audioPlayerHud; // offset 8
		safe_ptr<IConsole> _console; // offset 16 (0x10)
		// ...
	};
Core/NES/NesConsole.h: NesConsole::_memoryManager @ offset 0x40
	class NesConsole: public IConsole
	{
		// base class: sizeof = 16
		Emulator* _emu; // offset 16
		unique_ptr<NesConsole> _vsSubConsole; // offset 24 (sizeof = 8)
		NesConsole* _vsMainConsole; // offset 32
		unique_ptr<NesCpu> _cpu; // offset 40
		unique_ptr<BaseNesPpu> _ppu; // offset 48
		unique_ptr<NesApu> _apu; // offset 56
		unique_ptr<NesMemoryManager> _memoryManager; // offset 64
		// ...
	};
Core/NES/NesMemoryManager.h: NesMemoryManager::_internalRam @ offset 0x28
	class NesMemoryManager: public ISerializable
	{
		// base class: sizeof = 8
		Emulator* _emu; // offset 8
		CheatManager* _cheatManager; // offset 16
		NesConsole* _console; // offset 24
		BaseMapper* _mapper; // offset 32
		uint8_t* _internalRam; // offset 40 (0x28)
		// ...
	};
