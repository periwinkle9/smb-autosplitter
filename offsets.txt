>>> Nestopia UE offsets
source/win32/NstMain.cpp: return Nestopia::Application::Main(cmdShow).Run();
	(Look for one of the static variables that gets assigned the this pointer in the constructor)
source/win32/NstApplicationMain.hpp: Nestopia::Application::Main::emulator @ offset 0
	class Main
	{
		Managers::Emulator emulator;
		// ...
	};
source/win32/NstManagerEmulator.hpp: base class Nes::Emulator
	class Emulator : public Nes::Emulator // Actually Nes::Api::Emulator
	{
		// ...
	};
source/core/api/NstApiEmulator.hpp: Nes::Api::Emulator::machine @ offset 0
	class Emulator
	{
		Core::Machine& machine;
		// ...
	};
source/core/NstMachine.hpp: Nes::Core::Machine::cpu @ offset 8
	class Machine
	{
		uint state; // offset 0
		dword frame; // offset 4
		Cpu cpu; // offset 8
		// ...
	};
source/core/NstCpu.hpp: Nes::Core::Cpu::ram @ offset 0x68 (0x70 from Nes::Core::Machine)
	class Cpu
	{
		uint pc; // offset 0
		Cycles cycles; // offset 4 (sizeof = 24)
		uint a; // offset 28
		uint x; // offset 32
		uint y; // offset 36
		uint sp; // offset 40
		Flags flags; // offset 44 (sizeof = 20)
		Interrupt interrupt; // offset 64 (sizeof = 12)
		Hooks hooks; // offset 76 (sizeof = 8)
		uint opcode; // offset 84
		word jammed; // offset 88
		word model; // offset 90
		Linker linker; // offset 92 (sizeof = 4)
		qaword ticks; // offset 96
		Ram ram; // offset 104 (0x68)
		// ...
	};
source/core/NstCpu.hpp: Nes::Core::Ram::mem @ offset 0 (0x70 from Nes::Core::Machine)
	struct Ram
	{
		byte mem[RAM_SIZE]; // offset 0
		// ...
	};

>>> MesenRTA 0.0.7 offets

Emulation logic is handled by MesenCore.dll
InteropDLL/ConsoleWrapper.cpp: shared_ptr<Console> _console @ 0x1842F99D0
	(should be able to spot easily by analyzing InitDll())
Core/Console.h: Console::_memoryManager @ offset 0xB8
	class Console: public std::enable_shared_from_this<Console>
	{
		// base class: sizeof = 16
		SimpleLock _runLock; // offset 16 (sizeof = 12)
		SimpleLock _stopLock; // offset 28
		SimpleLock _debuggerLock; // offset 40
		atomic<uint32_t> _pauseCounter; // offset 52 (sizeof = 4)
		shared_ptr<RewindManager> _rewindManager; // offset 56 (sizeof = 16)
		shared_ptr<HistoryViewer> _historyViewer; // offset 72
		shared_ptr<CPU> _cpu; // offset 88
		shared_ptr<PPU> _ppu; // offset 104
		shared_ptr<APU> _apu; // offset 120
		shared_ptr<Debugger> _debugger; // offset 136
		shared_ptr<BaseMapper> _mapper; // offset 152
		shared_ptr<ControlManager> _controlManager; // offset 168
		shared_ptr<MemoryManager> _memoryManager; // offset 184 (0xB8)
		// ...
	};
Core/MemoryManager.h: MemoryManager::_internalRAM @ offset 0x58
	class MemoryManager: public Snapshotable
	{
		// base class: sizeof = 56 (Core/Snapshotable.h)
		shared_ptr<Console> _console; // offset 56 (sizeof = 16)
		shared_ptr<BaseMapper> _mapper; // offset 72
		uint8_t* _internalRAM; // offset 88 (0x58)
		// ...
	};
